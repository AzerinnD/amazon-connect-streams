!function(){var I=function(){return I.cache.hasOwnProperty(arguments[0])||(I.cache[arguments[0]]=I.parse(arguments[0])),I.format.call(null,I.cache[arguments[0]],arguments)};function g(I){return Object.prototype.toString.call(I).slice(8,-1).toLowerCase()}function C(I,g){for(var C=[];g>0;C[--g]=I);return C.join("")}I.format=function(A,Z){var l,b,G,d,c,V,W,m=1,B=A.length,i="",X=[];for(b=0;b<B;b++)if("string"===(i=g(A[b])))X.push(A[b]);else if("array"===i){if((d=A[b])[2])for(l=Z[m],G=0;G<d[2].length;G++){if(!l.hasOwnProperty(d[2][G]))throw I('[sprintf] property "%s" does not exist',d[2][G]);l=l[d[2][G]]}else l=d[1]?Z[d[1]]:Z[m++];if(/[^s]/.test(d[8])&&"number"!=g(l))throw I("[sprintf] expecting number but found %s",g(l));switch(d[8]){case"b":l=l.toString(2);break;case"c":l=String.fromCharCode(l);break;case"d":l=parseInt(l,10);break;case"e":l=d[7]?l.toExponential(d[7]):l.toExponential();break;case"f":l=d[7]?parseFloat(l).toFixed(d[7]):parseFloat(l);break;case"o":l=l.toString(8);break;case"s":l=(l=String(l))&&d[7]?l.substring(0,d[7]):l;break;case"u":l>>>=0;break;case"x":l=l.toString(16);break;case"X":l=l.toString(16).toUpperCase()}l=/[def]/.test(d[8])&&d[3]&&l>=0?"+"+l:l,V=d[4]?"0"==d[4]?"0":d[4].charAt(1):" ",W=d[6]-String(l).length,c=d[6]?C(V,W):"",X.push(d[5]?l+c:c+l)}return X.join("")},I.cache={},I.parse=function(I){for(var g=I,C=[],A=[],Z=0;g;){if(null!==(C=/^[^\x25]+/.exec(g)))A.push(C[0]);else if(null!==(C=/^\x25{2}/.exec(g)))A.push("%");else{if(null===(C=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(g)))throw"[sprintf] huh?";if(C[2]){Z|=1;var l=[],b=C[2],G=[];if(null===(G=/^([a-z_][a-z_\d]*)/i.exec(b)))throw"[sprintf] huh?";for(l.push(G[1]);""!==(b=b.substring(G[0].length));)if(null!==(G=/^\.([a-z_][a-z_\d]*)/i.exec(b)))l.push(G[1]);else{if(null===(G=/^\[(\d+)\]/.exec(b)))throw"[sprintf] huh?";l.push(G[1])}C[2]=l}else Z|=2;if(3===Z)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";A.push(C)}g=g.substring(C[0].length)}return A},this.sprintf=I,this.vsprintf=function(g,C,A){return(A=C.slice(0)).splice(0,0,g),I.apply(null,A)}}(),function(){var I=this;connect=I.connect||{},I.connect=connect,I.lily=connect;var g=navigator.userAgent,C=["bubbles","cancelBubble","cancelable","composed","data","defaultPrevented","eventPhase","isTrusted","lastEventId","origin","returnValue","timeStamp","type"];connect.sprintf=I.sprintf,connect.vsprintf=I.vsprintf,delete I.sprintf,delete I.vsprintf,connect.HTTP_STATUS_CODES={SUCCESS:200,TOO_MANY_REQUESTS:429,INTERNAL_SERVER_ERROR:500},connect.TRANSPORT_TYPES={CHAT_TOKEN:"chat_token",WEB_SOCKET:"web_socket"},connect.hitch=function(){var I=Array.prototype.slice.call(arguments),g=I.shift(),C=I.shift();return connect.assertNotNull(g,"scope"),connect.assertNotNull(C,"method"),connect.assertTrue(connect.isFunction(C),"method must be a function"),function(){var A=Array.prototype.slice.call(arguments);return C.apply(g,I.concat(A))}},connect.isFunction=function(I){return!!(I&&I.constructor&&I.call&&I.apply)},connect.isArray=function(I){return"[object Array]"===Object.prototype.toString.call(I)},connect.keys=function(I){var g=[];for(var C in connect.assertNotNull(I,"map"),I)g.push(C);return g},connect.values=function(I){var g=[];for(var C in connect.assertNotNull(I,"map"),I)g.push(I[C]);return g},connect.entries=function(I){var g=[];for(var C in I)g.push({key:C,value:I[C]});return g},connect.merge=function(){var I=Array.prototype.slice.call(arguments,0),g={};return I.forEach((function(I){connect.entries(I).forEach((function(I){g[I.key]=I.value}))})),g},connect.now=function(){return(new Date).getTime()},connect.find=function(I,g){for(var C=0;C<I.length;C++)if(g(I[C]))return I[C];return null},connect.contains=function(I,g){return I instanceof Array?null!=connect.find(I,(function(I){return I===g})):g in I},connect.containsValue=function(I,g){return I instanceof Array?null!=connect.find(I,(function(I){return I===g})):null!=connect.find(connect.values(I),(function(I){return I===g}))},connect.randomId=function(){return connect.sprintf("%s-%s",connect.now(),Math.random().toString(36).slice(2))},connect.makeEnum=function(I){var g={};return I.forEach((function(I){var C=I.replace(/\.?([a-z]+)_?/g,(function(I,g){return g.toUpperCase()+"_"})).replace(/_$/,"");g[C]=I})),g},connect.makeNamespacedEnum=function(I,g){var C=connect.makeEnum(g);return connect.keys(C).forEach((function(g){C[g]=connect.sprintf("%s::%s",I,C[g])})),C},connect.makeGenericNamespacedEnum=function(I,g,C){var A=connect.makeEnum(g);return connect.keys(A).forEach((function(g){A[g]=connect.sprintf("%s"+C+"%s",I,A[g])})),A},connect.isChromeBrowser=function(){return-1!==g.indexOf("Chrome")},connect.isFirefoxBrowser=function(){return-1!==g.indexOf("Firefox")},connect.isOperaBrowser=function(){return-1!==g.indexOf("Opera")},connect.getChromeBrowserVersion=function(){var I=g.substring(g.indexOf("Chrome")+7);return I?parseFloat(I):-1},connect.getFirefoxBrowserVersion=function(){var I=g.substring(g.indexOf("Firefox")+8);return I?parseFloat(I):-1},connect.isValidLocale=function(I){return[{id:"en_US",label:"English"},{id:"de_DE",label:"Deutsch"},{id:"es_ES",label:"Español"},{id:"fr_FR",label:"Français"},{id:"ja_JP",label:"日本語"},{id:"it_IT",label:"Italiano"},{id:"ko_KR",label:"한국어"},{id:"pt_BR",label:"Português"},{id:"zh_CN",label:"中文(简体)"},{id:"zh_TW",label:"中文(繁體)"}].map((function(I){return I.id})).includes(I)},connect.getOperaBrowserVersion=function(){var I=g.indexOf("Opera"),C=-1!==g.indexOf("Version")?g.substring(I+8):g.substring(I+6);return C?parseFloat(C):-1},connect.index=function(I,g){var C={};return I.forEach((function(I){C[g(I)]=I})),C},connect.set=function(I){var g={};return I.forEach((function(I){g[I]=1})),g},connect.relativeComplement=function(I,g){var C={};return connect.keys(g).forEach((function(A){A in I||(C[A]=g[A])})),C},connect.assertTrue=function(I,g){if(!I)throw new connect.ValueError(g)},connect.assertNotNull=function(I,g){return connect.assertTrue(null!=I&&void 0!==typeof I,connect.sprintf("%s must be provided",g||"A value")),I},connect.deepcopy=function(I){return JSON.parse(JSON.stringify(I))},connect.deepcopyCrossOriginEvent=function(I){const g={};return C.forEach((C=>{try{g[C]=I[C]}catch(I){connect.getLog().info("deepcopyCrossOriginEvent failed on key: ",C).sendInternalLogToServer()}})),connect.deepcopy(g)},connect.getBaseUrl=function(){var g=I.location;return connect.sprintf("%s//%s:%s",g.protocol,g.hostname,g.port)},connect.getUrlWithProtocol=function(g){var C=I.location.protocol;return g.substr(0,C.length)!==C?connect.sprintf("%s//%s",C,g):g},connect.isFramed=function(){try{return window.self!==window.top}catch(I){return!0}},connect.hasOtherConnectedCCPs=function(){return connect.numberOfConnectedCCPs>1},connect.fetch=function(I,g,C,A){return A=A||5,C=C||1e3,g=g||{},new Promise((function(Z,l){!function A(b){fetch(I,g).then((function(I){I.status===connect.HTTP_STATUS_CODES.SUCCESS?I.json().then((I=>Z(I))).catch((()=>Z({}))):1!==b&&(I.status>=connect.HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR||I.status===connect.HTTP_STATUS_CODES.TOO_MANY_REQUESTS)?setTimeout((function(){A(--b)}),C):l(I)})).catch((function(I){l(I)}))}(A)}))},connect.backoff=function(g,C,A,Z){connect.assertTrue(connect.isFunction(g),"func must be a Function");var l=this;g({success:function(I){Z&&Z.success&&Z.success(I)},failure:function(b,G){if(A>0){var d=2*C*Math.random();I.setTimeout((function(){l.backoff(g,2*d,--A,Z)}),d)}else Z&&Z.failure&&Z.failure(b,G)}})},connect.publishMetric=function(I){connect.core.getUpstream().sendUpstream(connect.EventType.BROADCAST,{event:connect.EventType.CLIENT_METRIC,data:I})},connect.publishSoftphoneStats=function(I){connect.core.getUpstream().sendUpstream(connect.EventType.BROADCAST,{event:connect.EventType.SOFTPHONE_STATS,data:I})},connect.publishSoftphoneReport=function(I){connect.core.getUpstream().sendUpstream(connect.EventType.BROADCAST,{event:connect.EventType.SOFTPHONE_REPORT,data:I})},connect.publishClientSideLogs=function(I){connect.core.getEventBus().trigger(connect.EventType.CLIENT_SIDE_LOGS,I)},connect.PopupManager=function(){},connect.PopupManager.prototype.open=function(I,g,C){var A=this._getLastOpenedTimestamp(g),Z=(new Date).getTime(),l=null;if(Z-A>864e5){if(C){var b=C.height||578,G=C.width||433,d=C.top||0,c=C.left||0;(l=window.open("",g,"width="+G+", height="+b+", top="+d+", left="+c)).location!==I&&(l=window.open(I,g,"width="+G+", height="+b+", top="+d+", left="+c))}else(l=window.open("",g)).location!==I&&(l=window.open(I,g));this._setLastOpenedTimestamp(g,Z)}return l},connect.PopupManager.prototype.clear=function(g){var C=this._getLocalStorageKey(g);I.localStorage.removeItem(C)},connect.PopupManager.prototype._getLastOpenedTimestamp=function(g){var C=this._getLocalStorageKey(g),A=I.localStorage.getItem(C);return A?parseInt(A,10):0},connect.PopupManager.prototype._setLastOpenedTimestamp=function(g,C){var A=this._getLocalStorageKey(g);I.localStorage.setItem(A,""+C)},connect.PopupManager.prototype._getLocalStorageKey=function(I){return"connectPopupManager::"+I};var A=connect.makeEnum(["granted","denied","default"]);connect.NotificationManager=function(){this.queue=[],this.permission=A.DEFAULT},connect.NotificationManager.prototype.requestPermission=function(){var g=this;"Notification"in I?I.Notification.permission===A.DENIED?(connect.getLog().warn("The user has requested to not receive notifications.").sendInternalLogToServer(),this.permission=A.DENIED):this.permission!==A.GRANTED&&I.Notification.requestPermission().then((function(I){g.permission=I,I===A.GRANTED?g._showQueued():g.queue=[]})):(connect.getLog().warn("This browser doesn't support notifications.").sendInternalLogToServer(),this.permission=A.DENIED)},connect.NotificationManager.prototype.show=function(I,g){if(this.permission===A.GRANTED)return this._showImpl({title:I,options:g});if(this.permission===A.DENIED)connect.getLog().warn("Unable to show notification.").sendInternalLogToServer().withObject({title:I,options:g});else{var C={title:I,options:g};connect.getLog().warn("Deferring notification until user decides to allow or deny.").withObject(C).sendInternalLogToServer(),this.queue.push(C)}},connect.NotificationManager.prototype._showQueued=function(){var I=this,g=this.queue.map((function(g){return I._showImpl(g)}));return this.queue=[],g},connect.NotificationManager.prototype._showImpl=function(g){var C=new I.Notification(g.title,g.options);return g.options.clicked&&(C.onclick=function(){g.options.clicked.call(C)}),C},connect.BaseError=function(g,C){I.Error.call(this,connect.vsprintf(g,C))},connect.BaseError.prototype=Object.create(Error.prototype),connect.BaseError.prototype.constructor=connect.BaseError,connect.ValueError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.ValueError.prototype=Object.create(connect.BaseError.prototype),connect.ValueError.prototype.constructor=connect.ValueError,connect.NotImplementedError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.NotImplementedError.prototype=Object.create(connect.BaseError.prototype),connect.NotImplementedError.prototype.constructor=connect.NotImplementedError,connect.StateError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.StateError.prototype=Object.create(connect.BaseError.prototype),connect.StateError.prototype.constructor=connect.StateError,connect.VoiceIdError=function(I,g,C){var A={};return A.type=I,A.message=g,A.stack=Error(g).stack,A.err=C,A},connect.isCCP=function(){return"ConnectSharedWorkerConduit"===connect.core.getUpstream().name}}(),function(){var I=this;connect=I.connect||{},I.connect=connect,I.globalConnect={},I.lily=connect,globalConnect.Container=null;var g=window.atob(""),C=function(I){this.region=I.region,this.id=this.region.replace(/-/g,"_"),this.height=I.height,this.style=I.iframe_style,this.ccp=this._createFramedCcp(JSON.stringify(I))};C.prototype._createFramedCcp=function(I){var g=g||"microphone; autoplay",C=this.style||"margin: 0; border: 0; padding: 0px; width: 0px; height: 0px",A=document.createElement("iframe");return A.srcdoc=this.getContent(I),A.allow=g,A.id=this.id,A.style=C,A.scrolling="no",A},C.prototype.getContent=function(I){return["<!DOCTYPE html>","<meta charset='UTF-8'>","<html>","<head>","<script type='text/javascript'>",g,"<\/script>","</head>","<body onload='init()'>","<div id=containerDiv style='width: 100%;height: "+this.height+"'></div>","<script type='text/javascript'>","function init() {","connect.core.initCCP(containerDiv,"+I+");","}","<\/script>","</body>","</html>"].join("")},globalConnect.Container=C}(),function(){var I=this;connect=I.connect||{},globalConnect=I.globalConnect||{},I.connect=connect,I.globalConnect=globalConnect,I.lily=connect,connect.core={},globalConnect.core={regions:{}};var g="465px",C=!0,A=function(I){var g=window.getComputedStyle(I);return{height:g.getPropertyValue("height"),width:g.getPropertyValue("width"),display:g.getPropertyValue("display")}},Z=function(I,g){if(connect.assertTrue("string"==typeof I,"Region provided "+I+" is not a valid string"),!(g||globalConnect.core.regions).hasOwnProperty(I)){var C="Region provided "+I+" is not found!";throw new connect.ValueError(C)}};globalConnect.core.initCCP=function(I,G){connect.assertNotNull(G.getPrimaryRegion,"getPrimaryRegion"),connect.assertTrue(connect.isFunction(G.getPrimaryRegion),"getPrimaryRegion must be a function");var d=G.getPrimaryRegion;delete G.getPrimaryRegion;var c=function(I,Z){connect.assertNotNull(Z.standByRegion,"ccpBackupResource"),connect.assertNotNull(Z.standByRegion.ccpUrl,"ccpUrl"),connect.assertNotNull(Z.standByRegion.loginUrl,"loginUrl"),connect.assertNotNull(Z.standByRegion.region,"region");var l=Z,b=Object.assign({},Z,{ccpUrl:Z.standByRegion.ccpUrl,loginUrl:Z.standByRegion.loginUrl,region:Z.standByRegion.region}),G=A(I);return"none"==G.display&&(C=!1),parseInt(G.height)<=0&&(I.style.height=g,G.height=g),[l,b].map((function(I){return connect.assertNotNull(I.ccpUrl,"ccpUrl"),connect.assertNotNull(I.loginUrl,"loginUrl"),connect.assertNotNull(I.region,"region"),delete I.standByRegion,I.loginPopup=!1,I.disasterRecoveryOn=!0,I.iframe_style="margin: 0; border: 0; padding:0px;width: 0px;height: 0px",I.height=G.height,I}))}(I,G);d((function(g){return new Promise((A=>{var G=c.reduce((function(I,g){return I[g.region]=null,I}),{});Z(g,G);var d=c.map((function(I){return I.region===g&&(I.isPrimary=!0),new globalConnect.Container(I)})),V=d.map((function(I){return I.ccp.outerHTML})),W=document.createElement("iframe");W.style="margin: 0; border: 0; padding:0px;width: 100%;height: 100%",W.id="globalCCP",W.scrolling="no",W.onload=function(){if(C){var I=Object.keys(G).find((function(I){return I!=g}));b(g,W.id),l(I,W.id)}d.map((function(A){globalConnect.core.regions[A.region]=W.contentDocument.getElementById(A.id).contentWindow.connect;var Z=globalConnect.core.regions[A.region];Z.core.getUpstream().onUpstream(Z.DisasterRecoveryEvents.FAILOVER,(function(A){A.isPrimary?(connect=Z,g=connect.core.region,C&&b(g,W.id)):C&&(I=Z.core.region,l(I,W.id))}))})),connect=globalConnect.core.regions[g],A()},W.srcdoc=V.join(""),I.appendChild(W)}))}),(function(I){console.error("[Disaster Recovery] An error occured, while attempting to retrieve your primary region;"),I()}))};var l=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height: 0; width: 0; border: 0px"},b=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height:800px;width:100%;border:0px"},G=function(I){return I=I||connect.core.region,Object.keys(globalConnect.core.regions).find((function(g){return g!==I}))};globalConnect.core.failover=function(){globalConnect.core.failoverTo(G())},globalConnect.core.failoverTo=function(I){Z(I);var g=G(I);d(g),c(I),connect=globalConnect.core.regions[I]};var d=function(I){var g=globalConnect.core.regions[I];g.getLog().info("[Disaster Recovery] Deactivating %s region.",g.core.region).sendInternalLogToServer(),g.core.suppressContacts(!0),g.core.forceOffline()},c=function(I){var g=globalConnect.core.regions[I];g.getLog().info("[Disaster Recovery] Activating %s region.",g.core.region).sendInternalLogToServer(),g.core.suppressContacts(!1)};connect.core.initCCP=globalConnect.core.initCCP}();