!function(){var m=function(){return m.cache.hasOwnProperty(arguments[0])||(m.cache[arguments[0]]=m.parse(arguments[0])),m.format.call(null,m.cache[arguments[0]],arguments)};m.format=function(I,g){for(var C,A,Z,l,b,G,c=1,d=I.length,B=[],W=0;W<d;W++)if("string"===(C=V(I[W])))B.push(I[W]);else if("array"===C){if((l=I[W])[2])for(A=g[c],Z=0;Z<l[2].length;Z++){if(!A.hasOwnProperty(l[2][Z]))throw m('[sprintf] property "%s" does not exist',l[2][Z]);A=A[l[2][Z]]}else A=l[1]?g[l[1]]:g[c++];if(/[^s]/.test(l[8])&&"number"!=V(A))throw m("[sprintf] expecting number but found %s",V(A));switch(l[8]){case"b":A=A.toString(2);break;case"c":A=String.fromCharCode(A);break;case"d":A=parseInt(A,10);break;case"e":A=l[7]?A.toExponential(l[7]):A.toExponential();break;case"f":A=l[7]?parseFloat(A).toFixed(l[7]):parseFloat(A);break;case"o":A=A.toString(8);break;case"s":A=(A=String(A))&&l[7]?A.substring(0,l[7]):A;break;case"u":A>>>=0;break;case"x":A=A.toString(16);break;case"X":A=A.toString(16).toUpperCase()}A=/[def]/.test(l[8])&&l[3]&&0<=A?"+"+A:A,b=l[4]?"0"==l[4]?"0":l[4].charAt(1):" ",G=l[6]-String(A).length,G=l[6]?function(I,g){for(var C=[];0<g;C[--g]=I);return C.join("")}(b,G):"",B.push(l[5]?A+G:G+A)}return B.join("")},m.cache={},m.parse=function(I){for(var g=I,C=[],A=[],Z=0;g;){if(null!==(C=/^[^\x25]+/.exec(g)))A.push(C[0]);else if(null!==(C=/^\x25{2}/.exec(g)))A.push("%");else{if(null===(C=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(g)))throw"[sprintf] huh?";if(C[2]){Z|=1;var l=[],b=C[2],G=[];if(null===(G=/^([a-z_][a-z_\d]*)/i.exec(b)))throw"[sprintf] huh?";for(l.push(G[1]);""!==(b=b.substring(G[0].length));)if(null!==(G=/^\.([a-z_][a-z_\d]*)/i.exec(b)))l.push(G[1]);else{if(null===(G=/^\[(\d+)\]/.exec(b)))throw"[sprintf] huh?";l.push(G[1])}C[2]=l}else Z|=2;if(3===Z)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";A.push(C)}g=g.substring(C[0].length)}return A};function V(I){return Object.prototype.toString.call(I).slice(8,-1).toLowerCase()}this.sprintf=m,this.vsprintf=function(I,g,C){return(C=g.slice(0)).splice(0,0,I),m.apply(null,C)}}(),function(){var c=this;connect=c.connect||{},c.connect=connect,c.lily=connect;var g=navigator.userAgent;connect.sprintf=c.sprintf,connect.vsprintf=c.vsprintf,delete c.sprintf,delete c.vsprintf,connect.HTTP_STATUS_CODES={SUCCESS:200,TOO_MANY_REQUESTS:429,INTERNAL_SERVER_ERROR:500},connect.TRANSPORT_TYPES={CHAT_TOKEN:"chat_token",WEB_SOCKET:"web_socket"},connect.hitch=function(){var g=Array.prototype.slice.call(arguments),C=g.shift(),A=g.shift();return connect.assertNotNull(C,"scope"),connect.assertNotNull(A,"method"),connect.assertTrue(connect.isFunction(A),"method must be a function"),function(){var I=Array.prototype.slice.call(arguments);return A.apply(C,g.concat(I))}},connect.isFunction=function(I){return!!(I&&I.constructor&&I.call&&I.apply)},connect.isArray=function(I){return"[object Array]"===Object.prototype.toString.call(I)},connect.keys=function(I){var g,C=[];for(g in connect.assertNotNull(I,"map"),I)C.push(g);return C},connect.values=function(I){var g,C=[];for(g in connect.assertNotNull(I,"map"),I)C.push(I[g]);return C},connect.entries=function(I){var g,C=[];for(g in I)C.push({key:g,value:I[g]});return C},connect.merge=function(){var I=Array.prototype.slice.call(arguments,0),g={};return I.forEach(function(I){connect.entries(I).forEach(function(I){g[I.key]=I.value})}),g},connect.now=function(){return(new Date).getTime()},connect.find=function(I,g){for(var C=0;C<I.length;C++)if(g(I[C]))return I[C];return null},connect.contains=function(I,g){return I instanceof Array?null!=connect.find(I,function(I){return I===g}):g in I},connect.containsValue=function(I,g){return I instanceof Array?null!=connect.find(I,function(I){return I===g}):null!=connect.find(connect.values(I),function(I){return I===g})},connect.randomId=function(){return connect.sprintf("%s-%s",connect.now(),Math.random().toString(36).slice(2))},connect.makeEnum=function(I){var C={};return I.forEach(function(I){var g=I.replace(/\.?([a-z]+)_?/g,function(I,g){return g.toUpperCase()+"_"}).replace(/_$/,"");C[g]=I}),C},connect.makeNamespacedEnum=function(g,I){var C=connect.makeEnum(I);return connect.keys(C).forEach(function(I){C[I]=connect.sprintf("%s::%s",g,C[I])}),C},connect.isChromeBrowser=function(){return-1!==g.indexOf("Chrome")},connect.isFirefoxBrowser=function(){return-1!==g.indexOf("Firefox")},connect.isOperaBrowser=function(){return-1!==g.indexOf("Opera")},connect.getChromeBrowserVersion=function(){var I=g.substring(g.indexOf("Chrome")+7);return I?parseFloat(I):-1},connect.getFirefoxBrowserVersion=function(){var I=g.substring(g.indexOf("Firefox")+8);return I?parseFloat(I):-1},connect.getOperaBrowserVersion=function(){var I=g.indexOf("Opera"),I=-1!==g.indexOf("Version")?g.substring(I+8):g.substring(I+6);return I?parseFloat(I):-1},connect.index=function(I,g){var C={};return I.forEach(function(I){C[g(I)]=I}),C},connect.set=function(I){var g={};return I.forEach(function(I){g[I]=1}),g},connect.relativeComplement=function(g,C){var A={};return connect.keys(C).forEach(function(I){I in g||(A[I]=C[I])}),A},connect.assertTrue=function(I,g){if(!I)throw new connect.ValueError(g)},connect.assertNotNull=function(I,g){return connect.assertTrue(null!=I&&!0,connect.sprintf("%s must be provided",g||"A value")),I},connect.deepcopy=function(I){return JSON.parse(JSON.stringify(I))},connect.getBaseUrl=function(){var I=c.location;return connect.sprintf("%s//%s:%s",I.protocol,I.hostname,I.port)},connect.isFramed=function(){try{return window.self!==window.top}catch(I){return!0}},connect.fetch=function(I,l,b,g){return g=g||5,b=b||1e3,l=l||{},new Promise(function(A,Z){!function g(C){fetch(I,l).then(function(I){I.status===connect.HTTP_STATUS_CODES.SUCCESS?A(I.json()):1!==C&&(I.status>=connect.HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR||I.status===connect.HTTP_STATUS_CODES.TOO_MANY_REQUESTS)?setTimeout(function(){g(--C)},b):Z(I)}).catch(function(I){Z(I)})}(g)})},connect.backoff=function(A,Z,l,b){connect.assertTrue(connect.isFunction(A),"func must be a Function");var G=this;A({success:function(I){b&&b.success&&b.success(I)},failure:function(I,g){var C;0<l?(C=2*Z*Math.random(),c.setTimeout(function(){G.backoff(A,2*C,--l,b)},C)):b&&b.failure&&b.failure(I,g)}})},connect.publishMetric=function(I){connect.core.getEventBus().trigger(connect.EventType.CLIENT_METRIC,I)},connect.publishSoftphoneStats=function(I){connect.core.getEventBus().trigger(connect.EventType.SOFTPHONE_STATS,I)},connect.publishSoftphoneReport=function(I){connect.core.getEventBus().trigger(connect.EventType.SOFTPHONE_REPORT,I)},connect.PopupManager=function(){},connect.PopupManager.prototype.open=function(I,g){var C=this._getLastOpenedTimestamp(g),A=(new Date).getTime(),Z=null;return 864e5<A-C&&((Z=window.open("",g)).location!==I&&(Z=window.open(I,g)),this._setLastOpenedTimestamp(g,A)),Z},connect.PopupManager.prototype.clear=function(I){I=this._getLocalStorageKey(I);c.localStorage.removeItem(I)},connect.PopupManager.prototype._getLastOpenedTimestamp=function(I){I=this._getLocalStorageKey(I),I=c.localStorage.getItem(I);return I?parseInt(I,10):0},connect.PopupManager.prototype._setLastOpenedTimestamp=function(I,g){I=this._getLocalStorageKey(I);c.localStorage.setItem(I,""+g)},connect.PopupManager.prototype._getLocalStorageKey=function(I){return"connectPopupManager::"+I};var C=connect.makeEnum(["granted","denied","default"]);connect.NotificationManager=function(){this.queue=[],this.permission=C.DEFAULT},connect.NotificationManager.prototype.requestPermission=function(){var g=this;"Notification"in c?c.Notification.permission===C.DENIED?(connect.getLog().warn("The user has requested to not receive notifications."),this.permission=C.DENIED):this.permission!==C.GRANTED&&c.Notification.requestPermission().then(function(I){(g.permission=I)===C.GRANTED?g._showQueued():g.queue=[]}):(connect.getLog().warn("This browser doesn't support notifications."),this.permission=C.DENIED)},connect.NotificationManager.prototype.show=function(I,g){if(this.permission===C.GRANTED)return this._showImpl({title:I,options:g});this.permission===C.DENIED?connect.getLog().warn("Unable to show notification.").withObject({title:I,options:g}):(g={title:I,options:g},connect.getLog().warn("Deferring notification until user decides to allow or deny.").withObject(g),this.queue.push(g))},connect.NotificationManager.prototype._showQueued=function(){var g=this,I=this.queue.map(function(I){return g._showImpl(I)});return this.queue=[],I},connect.NotificationManager.prototype._showImpl=function(I){var g=new c.Notification(I.title,I.options);return I.options.clicked&&(g.onclick=function(){I.options.clicked.call(g)}),g},connect.BaseError=function(I,g){c.Error.call(this,connect.vsprintf(I,g))},connect.BaseError.prototype=Object.create(Error.prototype),connect.BaseError.prototype.constructor=connect.BaseError,connect.ValueError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.ValueError.prototype=Object.create(connect.BaseError.prototype),connect.ValueError.prototype.constructor=connect.ValueError,connect.NotImplementedError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.NotImplementedError.prototype=Object.create(connect.BaseError.prototype),connect.NotImplementedError.prototype.constructor=connect.NotImplementedError,connect.StateError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.StateError.prototype=Object.create(connect.BaseError.prototype),connect.StateError.prototype.constructor=connect.StateError}(),function(){connect=this.connect||{},this.connect=connect,this.globalConnect={},this.lily=connect,globalConnect.Container=null;function I(I){this.region=I.region,this.id=this.region.replace(/-/g,"_"),this.height=I.height,this.style=I.iframe_style,this.ccp=this._createFramedCcp(JSON.stringify(I))}var g=window.atob("");I.prototype._createFramedCcp=function(I){var g=this.style||"margin: 0; border: 0; padding: 0px; width: 0px; height: 0px",C=document.createElement("iframe");return C.srcdoc=this.getContent(I),C.allow="microphone; autoplay",C.id=this.id,C.style=g,C.scrolling="no",C},I.prototype.getContent=function(I){return["<!DOCTYPE html>","<meta charset='UTF-8'>","<html>","<head>","<script type='text/javascript'>",g,"<\/script>","</head>","<body onload='init()'>","<div id=containerDiv style='width: 100%;height: "+this.height+"'></div>","<script type='text/javascript'>","function init() {","connect.core.initCCP(containerDiv,"+I+");","}","<\/script>","</body>","</html>"].join("")},globalConnect.Container=I}(),function(){var I=this;connect=I.connect||{},globalConnect=I.globalConnect||{},I.connect=connect,I.globalConnect=globalConnect,I.lily=connect,connect.core={},globalConnect.core={regions:{}};function G(I,g){if(connect.assertTrue("string"==typeof I,"Region provided "+I+" is not a valid string"),!(g||globalConnect.core.regions).hasOwnProperty(I)){I="Region provided "+I+" is not found!";throw new connect.ValueError(I)}}var Z="465px",c=!0,d=function(I){I=window.getComputedStyle(I);return{height:I.getPropertyValue("height"),width:I.getPropertyValue("width"),display:I.getPropertyValue("display")}};globalConnect.core.initCCP=function(l,I){connect.assertNotNull(I.getPrimaryRegion,"getPrimaryRegion"),connect.assertTrue(connect.isFunction(I.getPrimaryRegion),"getPrimaryRegion must be a function");var g=I.getPrimaryRegion;delete I.getPrimaryRegion;var b=function(I,g){connect.assertNotNull(g.standByRegion,"ccpBackupResource"),connect.assertNotNull(g.standByRegion.ccpUrl,"ccpUrl"),connect.assertNotNull(g.standByRegion.loginUrl,"loginUrl"),connect.assertNotNull(g.standByRegion.region,"region");var C=g,g=Object.assign({},g,{ccpUrl:g.standByRegion.ccpUrl,loginUrl:g.standByRegion.loginUrl,region:g.standByRegion.region}),A=d(I);return"none"==A.display&&(c=!1),parseInt(A.height)<=0&&(I.style.height=Z,A.height=Z),[C,g].map(function(I){return connect.assertNotNull(I.ccpUrl,"ccpUrl"),connect.assertNotNull(I.loginUrl,"loginUrl"),connect.assertNotNull(I.region,"region"),delete I.standByRegion,I.loginPopup=!1,I.disasterRecoveryOn=!0,I.iframe_style="margin: 0; border: 0; padding:0px;width: 0px;height: 0px",I.height=A.height,I})}(l,I);g(function(A){var I=b.reduce(function(I,g){return I[g.region]=null,I},{});G(A,I);var g=b.map(function(I){return I.region===A&&(I.isPrimary=!0),new globalConnect.Container(I)}),C=g.map(function(I){return I.ccp.outerHTML}),Z=document.createElement("iframe");Z.style="margin: 0; border: 0; padding:0px;width: 100%;height: 100%",Z.id="globalCCP",Z.scrolling="no",Z.onload=function(){var C;c&&(C=Object.keys(I).find(function(I){return I!=A}),W(A,Z.id),B(C,Z.id)),g.map(function(I){globalConnect.core.regions[I.region]=Z.contentDocument.getElementById(I.id).contentWindow.connect;var g=globalConnect.core.regions[I.region];g.core.getUpstream().onUpstream(g.DisasterRecoveryEvents.FAILOVER,function(I){I.isPrimary?(connect=g,A=connect.core.region,c&&W(A,Z.id)):c&&(C=g.core.region,B(C,Z.id))})}),connect=globalConnect.core.regions[A]},Z.srcdoc=C.join(""),l.appendChild(Z)},function(){console.log("[Disaster Recovery] An error occured, while attempting to retrieve your primary region;")})};function C(g){return g=g||connect.core.region,Object.keys(globalConnect.core.regions).find(function(I){return I!==g})}var B=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height: 0; width: 0; border: 0px"},W=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height:800px;width:100%;border:0px"};globalConnect.core.failover=function(){globalConnect.core.failoverTo(C())},globalConnect.core.failoverTo=function(I){G(I);var g=C(I);A(g),l(I),connect=globalConnect.core.regions[I]};var A=function(I){I=globalConnect.core.regions[I];I.getLog().info("[Disaster Recovery] Deactivating %s region.",I.core.region),I.core.suppressContacts(!0),I.core.forceOffline()},l=function(I){I=globalConnect.core.regions[I];I.getLog().info("[Disaster Recovery] Activating %s region.",I.core.region),I.core.suppressContacts(!1)};connect.core.initCCP=globalConnect.core.initCCP}();